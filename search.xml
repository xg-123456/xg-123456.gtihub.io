<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>笔试题3</title>
      <link href="/xg-123456.gtihub.io/2021/10/09/bi-shi-ti-3/"/>
      <url>/xg-123456.gtihub.io/2021/10/09/bi-shi-ti-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-DNA序列"><a href="#1-DNA序列" class="headerlink" title="1.DNA序列"></a>1.DNA序列</h1><p>题目：</p><p>一个DNA序列由A/C/G/T四个字母的排列组合组成。G和C的比例（定义为GC-Ratio）是序列中G和C两个字母的总的出现次数除以总的字母数目（也就是序列长度）。在基因工程中，这个比例非常重要。因为高的GC-Ratio可能是基因的起始点。</p><p>给定一个很长的DNA序列，以及限定的子串长度N，请帮助研究人员在给出的DNA序列中从左往右找出GC-Ratio最高且长度为N的第一个子串。</p><p>DNA序列为ACGT的子串有:ACG,CG,CGT等等，但是没有AGT，CT等等</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入一个string型基因序列，和int型子串的长度</p><h3 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h3><p>找出GC比例最高的子串,如果有多个则输出第一个的子串</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">ACGT</span><br><span class="line">2</span><br><span class="line">输出：</span><br><span class="line">CG</span><br><span class="line">说明：</span><br><span class="line">ACGT长度为2的子串有AC,CG,GT3个，其中AC和GT2个的GC-Ratio都为0.5，CG为1，故输出CG </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pubilc class HJ63&#123;</span><br><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">Scanner in = new Scanner(System.in);</span><br><span class="line">while(in.hasNextLine())&#123;</span><br><span class="line">String s = in.nextLine();</span><br><span class="line">int n = Integer.parseInt(in.nextLine());</span><br><span class="line">int max =0;//记录最大CG数</span><br><span class="line">int count =0;//记录当前CG数</span><br><span class="line">int pos = 0;//记录当前子串起始位置</span><br><span class="line"> for(int left = 0,right = n-1;right&lt;s.length();left++,right++)&#123;</span><br><span class="line">                if(right + 1 &lt;s.length())&#123;//保证不越界</span><br><span class="line">                    if((s.charAt(right+1) == &#x27;G&#x27; || s.charAt(right+1) == &#x27;C&#x27;) &amp;&amp; </span><br><span class="line">                      (s.charAt(left) != &#x27;G&#x27; &amp;&amp; s.charAt(left) != &#x27;C&#x27;))&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                        if(count&gt;max)&#123;</span><br><span class="line">                            max = count;</span><br><span class="line">                            pos = left + 1;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if((s.charAt(right+1) != &#x27;G&#x27; &amp;&amp; s.charAt(right+1) != &#x27;C&#x27;) &amp;&amp; </span><br><span class="line">                      (s.charAt(left) == &#x27;G&#x27; || s.charAt(left) == &#x27;C&#x27;))&#123;</span><br><span class="line">                        count--;</span><br><span class="line">                        //往前移动 计数器-- 就是left本来含有C或者G</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(s.substring(pos,pos + n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-MP3光标跟显示歌曲名称"><a href="#2-MP3光标跟显示歌曲名称" class="headerlink" title="2.MP3光标跟显示歌曲名称"></a>2.MP3光标跟显示歌曲名称</h1><p>MP3 Player因为屏幕较小，显示歌曲列表的时候每屏只能显示几首歌曲，用户要通过上下键才能浏览所有的歌曲。为了简化处理，假设每屏只能显示4首歌曲，光标初始的位置为第1首歌。</p><p>现在要实现通过上下键控制光标移动来浏览歌曲列表，控制逻辑如下：</p><ol><li>歌曲总数&lt;=4的时候，不需要翻页，只是挪动光标位置。</li></ol><p>光标在第一首歌曲上时，按Up键光标挪到最后一首歌曲；光标在最后一首歌曲时，按Down键光标挪到第一首歌曲。</p><p><img src="http://uploadfiles.nowcoder.com/images/20151225/60_1451044435725_D0096EC6C83575373E3A21D129FF8FEF" alt="img"></p><p>其他情况下用户按Up键，光标挪到上一首歌曲；用户按Down键，光标挪到下一首歌曲。</p><figure class="highlight plaintext"><figcaption><span>java.util.Scanner;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner in = new Scanner(System.in);</span><br><span class="line">        while (in.hasNextLine()) &#123;</span><br><span class="line">            int sum = Integer.parseInt(in.nextLine());</span><br><span class="line">            String ops = in.nextLine();</span><br><span class="line">            MusicList musicList = new MusicList(sum, 4);</span><br><span class="line">            for (char c : ops.toCharArray()) &#123;</span><br><span class="line">                if (c == &#x27;U&#x27;) &#123;</span><br><span class="line">                    musicList.moveUp();</span><br><span class="line">                &#125; else if (c == &#x27;D&#x27;) &#123;</span><br><span class="line">                    musicList.moveDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            musicList.showList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MusicList &#123;</span><br><span class="line">    private int top = 0;//顶部</span><br><span class="line">    private int end;//底部</span><br><span class="line">    private int cursor = 0;//当前光标</span><br><span class="line">    private int limit;//可视限制</span><br><span class="line">    private int sum;//歌曲总数</span><br><span class="line">    public MusicList(int sum, int limit) &#123;</span><br><span class="line">        this.sum = sum;</span><br><span class="line">        this.limit = limit;</span><br><span class="line">        if (sum &lt;= limit) &#123;</span><br><span class="line">            this.end = sum - 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.end = limit - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void showList() &#123;     </span><br><span class="line">        for (int i = top; i &lt;= end; i++) &#123;</span><br><span class="line">            System.out.print((i + 1) + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(cursor + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    public void moveUp() &#123;</span><br><span class="line">        //当前光标在顶部之下</span><br><span class="line">        if (cursor &gt; top) &#123;</span><br><span class="line">            cursor--;</span><br><span class="line">            return;</span><br><span class="line">        &#125; </span><br><span class="line">        //cursor == top</span><br><span class="line">        //1. 数量少于可视列表</span><br><span class="line">        if (sum &lt;= limit) &#123;</span><br><span class="line">            cursor = end;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //2. 数量超过可视列表</span><br><span class="line">        //  a. top == 0</span><br><span class="line">        if (top == 0) &#123;</span><br><span class="line">            top = sum - limit;</span><br><span class="line">            cursor = end = sum - 1;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //  b. top != 0</span><br><span class="line">        cursor--;</span><br><span class="line">        top--;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    public void moveDown() &#123;</span><br><span class="line">        //当前光标在底部之上</span><br><span class="line">        if (cursor &lt; end) &#123;</span><br><span class="line">            cursor++;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //cursor == end</span><br><span class="line">        //1. 数量少于可视列表</span><br><span class="line">        if (sum &lt;= limit) &#123;</span><br><span class="line">            cursor = top;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">         //2. 数量超过可视列表</span><br><span class="line">        //  a. end == sum - 1</span><br><span class="line">        if (end == sum - 1) &#123;</span><br><span class="line">            end = limit - 1;</span><br><span class="line">            cursor = top = 0;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //  b. end != sum - 1</span><br><span class="line">        cursor++;</span><br><span class="line">        top++;</span><br><span class="line">        end++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-查找A-B两字符串最长的公共子串"><a href="#3-查找A-B两字符串最长的公共子串" class="headerlink" title="3.查找A,B两字符串最长的公共子串"></a>3.查找A,B两字符串最长的公共子串</h1><p>题目：查找两个字符串a,b中的最长公共子串。若有多个，输出在较短串中最先出现的那个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        while (sc.hasNext()) &#123;</span><br><span class="line">            String str1 = sc.nextLine();</span><br><span class="line">            String str2 = sc.nextLine();</span><br><span class="line">            if (str1.length() &gt; str2.length()) &#123;//将字符串长的设置为字符串2</span><br><span class="line">                String tmp = str1;</span><br><span class="line">                str1 = str2;</span><br><span class="line">                str2 = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            int len1 = str1.length();</span><br><span class="line">            int len2 = str2.length();</span><br><span class="line">            char[] c1 = str1.toCharArray();</span><br><span class="line">            char[] c2 = str2.toCharArray();</span><br><span class="line">            int[][] dp = new int[len1][len2];</span><br><span class="line">            </span><br><span class="line">            for (int i = 0; i &lt; len2; i++) &#123;</span><br><span class="line">                if (c1[0] == c2[i]) &#123;</span><br><span class="line">                dp[0][i] = 1;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            int maxI = 0; /记录最后一个相等的字符位置</span><br><span class="line">            int maxj = 0;</span><br><span class="line">            int max = 1; </span><br><span class="line">            for (int i = 1; i &lt; len1; i++) &#123;</span><br><span class="line">                for (int j = 1; j &lt; len2; j++) &#123;</span><br><span class="line">                    if (c1[i] == c2[j]) &#123;</span><br><span class="line">                        dp[i][j] = Math.max(1, dp[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (c1[i] == c2[j] &amp;&amp; c1[i - 1] == c2[j - 1]) &#123;</span><br><span class="line">                        dp[i][j] = dp[i - 1][j - 1] + 1;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    if (max &lt; dp[i][j]) &#123;</span><br><span class="line">                        max = dp[i][j];</span><br><span class="line">                        maxI = i;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            System.out.println(str1.substring(maxI-max + 1, maxI + 1));</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-输入配置命令-返回对应结果"><a href="#4-输入配置命令-返回对应结果" class="headerlink" title="4.输入配置命令 返回对应结果"></a>4.输入配置命令 返回对应结果</h1><p>描述</p><p>有6条配置命令，它们执行的结果分别是：</p><table><thead><tr><th><strong>命  令</strong></th><th><strong>执  行</strong></th></tr></thead><tbody><tr><td><strong>reset</strong></td><td>reset what</td></tr><tr><td><strong>reset board</strong></td><td>board fault</td></tr><tr><td><strong>board add</strong></td><td>where to add</td></tr><tr><td><strong>board delete</strong></td><td>no board at all</td></tr><tr><td><strong>reboot backplane</strong></td><td>impossible</td></tr><tr><td><strong>backplane abort</strong></td><td>install first</td></tr><tr><td><em><strong>he he</strong></em></td><td>unknown command</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">    //字段，把匹配字符串和命令映射保存</span><br><span class="line">    private static String[] commands = new String[]&#123;&quot;reset&quot;, &quot;reset board&quot;, &quot;board add&quot;, &quot;board delete&quot;, </span><br><span class="line">                                         &quot;reboot backplane&quot;, &quot;backplane abort&quot;&#125;;</span><br><span class="line">    private static Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;()&#123;&#123;</span><br><span class="line">            put(&quot;reset&quot;, &quot;reset what&quot;);</span><br><span class="line">            put(&quot;reset board&quot;, &quot;board fault&quot;);</span><br><span class="line">            put(&quot;board add&quot;, &quot;where to add&quot;);</span><br><span class="line">            put(&quot;board delete&quot;, &quot;no board at all&quot;);</span><br><span class="line">            put(&quot;reboot backplane&quot;, &quot;impossible&quot;);</span><br><span class="line">            put(&quot;backplane abort&quot;, &quot;install first&quot;);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    //主函数</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        while(sc.hasNext())&#123;</span><br><span class="line">            String s = sc.nextLine();</span><br><span class="line">            String execute = getExecute(s);</span><br><span class="line">            System.out.println(execute);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //根据输入字符串匹配key，进而找到命令</span><br><span class="line">    private static String getExecute(String s)&#123;</span><br><span class="line">        //特例</span><br><span class="line">        if(s==null || s.length()==0) return &quot;unknown command&quot;;</span><br><span class="line">        </span><br><span class="line">        //输入字符串用空格分割</span><br><span class="line">        String[] arr = s.split(&quot;\\ &quot;);</span><br><span class="line">        //遍历命令，找匹配，同时记录匹配下标和共匹配几个字符串</span><br><span class="line">        int index=0, count=0;</span><br><span class="line">        for(int i=0; i&lt;commands.length; i++)&#123;</span><br><span class="line">            //命令也用空格划分</span><br><span class="line">            String[] temp = commands[i].split(&quot;\\ &quot;);</span><br><span class="line">            //长度不一致，跳过当前循环</span><br><span class="line">            if(temp.length!=arr.length) continue;</span><br><span class="line">            //长度都为1</span><br><span class="line">            if(arr.length==1 &amp;&amp; temp[0].contains(arr[0]))&#123;</span><br><span class="line">            //contains使用指定的比较规则返回一个值，该值指示指定的字符是否出现在此字符串中 判断输入的ky是否在对面的hsahmap中。</span><br><span class="line">                count++;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">            //长度都为2</span><br><span class="line">            if(arr.length==2 &amp;&amp; temp[0].contains(arr[0]) &amp;&amp; temp[1].contains(arr[1]))&#123;</span><br><span class="line">                count++;</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //匹配次数大于1，或为0返回unknow command</span><br><span class="line">        if(count&gt;1 || count==0) return &quot;unknown command&quot;;</span><br><span class="line">        else&#123;</span><br><span class="line">            //找到映射返回</span><br><span class="line">            String exe = map.get((commands[index]));</span><br><span class="line">            return exe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的思维逻辑</title>
      <link href="/xg-123456.gtihub.io/2021/10/08/you-qu-de-si-wei-luo-ji/"/>
      <url>/xg-123456.gtihub.io/2021/10/08/you-qu-de-si-wei-luo-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="笔试中那些有趣的思维逻辑题"><a href="#笔试中那些有趣的思维逻辑题" class="headerlink" title="笔试中那些有趣的思维逻辑题"></a>笔试中那些有趣的思维逻辑题</h1><h2 id="1-射击问题"><a href="#1-射击问题" class="headerlink" title="1.射击问题"></a>1.射击问题</h2><p>​    三个小伙子同时爱上了一个姑娘，为了决定他们谁能娶这个姑娘，他们决定用手枪进行一次决斗。小李的命中率是30%，小黄比他好些，命中率是50%，最出色 的枪手是小林，他从不失误，命中率是100%。由于这个显而易见的事实，为公平起见，他们决定按这样的顺序：小李先开枪，小黄第二，小林最后。然后这样循 环，直到他们只剩下一个人。那么这三个人中谁活下来的机会最大呢？他们都应该采取什么样的策略？</p><ol><li>小李有三个选择, 空枪, 射击小黄, 射击小林.<br>小李不会选择射击小黄, 因有30% 概率小黄死亡, 小林涉及, 小李必死, 死亡概率 30%;<br>小李不会选择射击小林, 因有30% 概率小林死亡, 小黄回击, 小李可能死, 死亡概率为 30% * 50% =   15%;<br>小李会选择空枪, 因为小黄必然射击小林, 小林死亡概率 50%;<br>小林若不死, 必然射击小黄, 小黄死亡概率 50% *100% = 50%;<br>小李死亡概率为0.</li><li>此时,小黄和小林中间必然死亡一人.   小李可能面对小黄, 可能面对 小林.<br>面对小黄, 生存概率   30% + 70% *50% = 65%<br>面对小林   生存概率   30% + 70%<em>100% =   30%<br>汇总生存概率为:<br>小李,   65% * 50% + 30%<em>50% = 47.5 %<br>小黄    50%</em> 70%= 35%<br>小林    50%</em> 70%= 35%<br>因此小李生存概率最大. 采取方法如上所述</li></ol><h2 id="2-重叠硬币"><a href="#2-重叠硬币" class="headerlink" title="2.重叠硬币"></a>2.重叠硬币</h2><p>​    在一张长方形的桌面上放了n个一样大小的圆形硬币。这些硬币中可能有一些不完全在桌面内，也可能有一些彼此重叠；当再多放一个硬币而它的圆心在桌面内时，新放的硬币便必定与原先某些硬币重叠。请证明整个桌面可以用4n个硬币完全覆盖。</p><p>​        因为当第n+1个硬币时，新放的硬币便必定与原先某些硬币重叠。因此，设硬币直径为D，桌面上任一点距离最近的硬币的圆心的距离不大于2D。所以，如果硬币的直径为2D，那么n个直径为2D的硬币就可以覆盖整个桌面。对整个桌面长宽各缩小到原来的一半，连同上面的硬币也进行缩小，那么1/4大小的桌面可以被n个直径为D的硬币覆盖整个桌面。把原来大小的桌面分成等大小的四块，每块都可以被n个硬币完全覆盖。所以整个桌面可以用4n个硬币完全覆盖。</p><h2 id="3-猜牌问题"><a href="#3-猜牌问题" class="headerlink" title="3.猜牌问题"></a>3.猜牌问题</h2><p>S先生、P先生、Q先生他们知道桌子的抽屉里有16张扑克牌：红桃A、Q、4 黑桃J、8、4、2、7、3 草花K、Q、5、4、6 方块A、5。约翰教授从这16张牌中挑出一张牌来，并把这张牌的点数告诉 P先生，把这张牌的花色告诉Q先生。这时，约翰教授问P先生和Q 先生：你们能从已知的点数或花色中推知这张牌是什么牌吗？</p><p> 于是，S先生听到如下的对话：</p><p>P先生：我不知道这张牌。<br>Q先生：我知道你不知道这张牌。<br>P先生：现在我知道这张牌了。<br>Q先生：我也知道了。<br>听罢以上的对话，S先生想了一想之后，就正确地推出这张牌是什么牌。</p><p>P知道点数，而不知道花色， 不能断定牌， 说明该点数不止一张牌， 得出点数可能为4， Q, A. 5。<br>按点数排，<br>红桃4， 黑桃4， 草花4；<br>红桃Q， 草花Q；<br>红桃A， 方块A；<br>草花5， 方块5。<br>为便于理解， 按花色排，即<br>黑桃   4<br>红桃，4， 红桃Q， 红桃A<br>草花   4， 草花5，   草花Q<br>方块    A， 方块 5。<br>Q知道P 不知道， 说明该花色的牌全部是重复的， 立即得出<br>方块 A ， 方块 5<br>红桃A， 红桃 Q ，红桃4<br>P 说， 我现在知道了。 说明该点数是唯一的，<br>方块5， 红桃Q ， 红桃4<br>Q说， 我也知道了。 说明花色是唯一的，<br>得到 方片5。</p><h2 id="4-体育项目"><a href="#4-体育项目" class="headerlink" title="4.体育项目"></a>4.体育项目</h2><p>​    有一种体育竞赛共含M个项目，有运动员A，B，C参加，在每一项目中，第一,第二,第三名分别的X，Y，Z分，其中X,Y,Z为正整数且X&gt;Y&gt;Z。最后A得22分，B与C均得9分，B在百米赛中取得第一。求M的值，并问在跳高中谁得第二名。</p><p>M （X + Y + Z）= 22+ 9 +9= 40<br>其中，X + Y + Z&gt;=6， M&gt;=2（第一,第二,第三名分别的X，Y，Z分，其中X,Y,Z为正整数且X&gt;Y&gt;Z。所以至少为 123分数及大于6）<br>存在<br>M =2, X + Y + Z=20<br>M =5， X + Y + Z=8<br>M=2 时， B 获得第一， 说明第一分数小于9， A不可能获得22。排除<br>所以M =5. 仅仅存在两种分数可能分布。<br>X= 5， Y =2, z =1<br>X =4,    Y =3, Z =1<br>当第一名获得分数为4时，B 需要在4场比赛中获得5分。即<br>3T＋U=5.<br>T + U =4. 无整数解，排除。<br>所以，M=5，X= 5， Y =2, z =1。<br>比赛1，    第一名A， 第二名，C， 第三名B<br>比赛2，    第一名A， 第二名，C， 第三名B<br>比赛3，    第一名A， 第二名，C， 第三名B<br>比赛4，    第一名A， 第二名，C， 第三名B<br>比赛5，    第一名 B， 第二名 A   , 第三名 C。   此比赛确定为百米赛跑。<br>所以跳高第二名为C。</p><h2 id="5-过桥问题"><a href="#5-过桥问题" class="headerlink" title="5.过桥问题"></a>5.过桥问题</h2><p>U2合唱团在17分钟内得赶到演唱会场，途中必需跨过一座桥，四个人从桥的同一端出发，你得帮助他们到达另一端，天色很暗，而他们只有一 只手电筒。一次同时最多可以有两人一起过桥，而过桥的时候必须持有手电筒，所以就得有人把手电筒带来带去，来回桥两端。手电筒是不能用丢的方式来传递的。 四个人的步行速度各不同，若两人同行则以较慢者的速度为准。Bono需花1分钟过桥，Edge需花2分钟过桥，Adam需花5分钟过桥，Larry需花 10分钟过桥。他们要如何在17分钟内过桥呢？</p><p>这周题型：尽量让花时间短的人多走。</p><p>2分钟与1分钟同时过去，1独自回来， 耗时3分钟；<br>5分钟与10分钟同时过去， 2分钟独自回来， 耗时12分钟；<br>2分钟和1分钟同时过去， 耗时2分钟<br>共耗时17分钟。</p><h2 id="6-烧绳子"><a href="#6-烧绳子" class="headerlink" title="6.烧绳子"></a>6.烧绳子</h2><p>烧一根不均匀的绳要用一个小时，如何用它来判断半个小时？</p><p>烧一根不均匀的绳,从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子,问如何用烧绳的方法来计时一个小时十五分钟呢? （微软的笔试题）<br>两头一起烧；<br>取3根， 第一根点两头，第二根点一头，第一根烧完为半小时，此时将第二根另一头点燃，烧完获得15分钟。</p><h2 id="7-判断钱币"><a href="#7-判断钱币" class="headerlink" title="7.判断钱币"></a>7.判断钱币</h2><p>假设在桌上有三个密封的盒，一个盒中有2枚银币(1银币=10便士)，一个盒中有2枚镍币(1镍币=5便士)，还有一个盒中有1枚银币和1枚镍 币。这些盒子被标上10便士、 15便士和20便士，但每个标签都是错误的。允许你从一个盒中拿出1枚硬币放在盒前，看到这枚硬币，你能否说出每个盒内装的东西呢？</p><p>银币 20分，镍币10分， 混合币 15分。将三个盒子分别编号为1，2，3。（记住每个标签都是错误的，因此混合必标签一定错误。）<br>每个标签都错误的方法只有两个，2，3，1 或 3，1，2。<br>在标签为15分的盒子里面， 取出一个硬币。<br>如果是银币，则，15分的为银币盒子， 10分的为混合币盒子，15分为镍币。<br>如果是镍币，则，15分的为镍币盒子， 10分的为银币盒子， 10分的为银币。</p><h2 id="8-分水问题"><a href="#8-分水问题" class="headerlink" title="8.分水问题"></a>8.分水问题</h2><p>有三个桶，两个大的可装8斤的水，一个小的可装3斤的水，现在有16斤水装满了两大桶就是8斤的桶，小桶空着，如何把这16斤水分给4个人，每人4斤。没有其他任何工具，4人自备容器，分出去的水不可再要回来。<br>883<br>880<br>853<br>850 3<br>823 3<br>803 32<br>830<br>533<br>560<br>263<br>281<br>280 321<br>802<br>703<br>730<br>433<br>460<br>163<br>063 421<br>810<br>513<br>450<br>500 4214<br>023 4214<br>000 4444</p><h2 id="9-怀表"><a href="#9-怀表" class="headerlink" title="9.怀表"></a>9.怀表</h2><p>从前有一位老钟表匠，为一个教堂装一只大钟。他年老眼花，把长短针装配错了，短针走的速度反而是长针的12倍。装配的时候是上午6点，他把短针指 在“6 ”上，长针指在“12”上。老钟表匠装好就回家去了。人们看这钟一会儿7点，过了不一会儿就8点了，都很奇怪，立刻去找老钟表匠。等老钟表匠赶到，已经是 下午7点多钟。他掏出怀表来一对，钟准确无误，疑心人们有意捉弄他，一生气就回去了。这钟还是8点、9点地跑，人们再去找钟表匠。老钟表匠第二天早晨8点 多赶来用表一对，仍旧准确无误。 请你想一想，老钟表匠第一次对表的时候是7点几分？第二次对表又是8点几分？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试题2</title>
      <link href="/xg-123456.gtihub.io/2021/10/06/bi-shi-ti-2/"/>
      <url>/xg-123456.gtihub.io/2021/10/06/bi-shi-ti-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-坐标移动"><a href="#1-坐标移动" class="headerlink" title="1.坐标移动"></a>1.坐标移动</h1><p>题目：<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20211006101339421.png" alt="image-20211006101339421"></p><ul><li>substring() 方法用于提取字符串中介于两个指定下标之间的字符。</li><li>charAt() 方法可返回指定位置的字符。</li><li>matches() 方法用于检测字符串是否匹配给定的正则表达式。</li><li>for循环写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 建立一个数组 */</span></span><br><span class="line"><span class="keyword">int</span>[] integers = &#123;<span class="number">1</span>， <span class="number">2</span>， <span class="number">3</span>， <span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">/* 开始遍历 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : integers) &#123;</span><br><span class="line">System.out.println(i);<span class="comment">/* 依次输出“1”、“2”、“3”、“4” */</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20211006104427619.png" alt="image-20211006104427619"></p><ul><li>解法中matches(“[WASD] [0-9] {1,2}”)说明至少重复1次最多2次（1跟2指向前边的数字）</li></ul><p>解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String[] in = bf.readLine().split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(String s : in)&#123;</span><br><span class="line">            <span class="comment">// 不满足题目给定坐标规则</span></span><br><span class="line">            <span class="keyword">if</span>(!s.matches(<span class="string">&quot;[WASD][0-9]&#123;1,2&#125;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> val = Integer.valueOf(s.substring(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">switch</span>(s.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">                    y += val;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">                    y -= val;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                    x -= val;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                    x += val;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x+<span class="string">&quot;,&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-密码验证合格程序"><a href="#2-密码验证合格程序" class="headerlink" title="2.密码验证合格程序"></a>2.密码验证合格程序</h1><p>密码要求:</p><p>1.长度超过8位</p><p>2.包括大小写字母.数字.其它符号,以上四种至少三种</p><p>3.不能有相同长度大于2的子串重复</p><ul><li><p>//重载Contains(Char, StringComparison)    使用指定的比较规则返回一个值，该值指示指定的字符是否出现在此字符串中</p></li><li><p>Pattern类用于创建一个正则表达式,也可以说创建一个匹配模式,它的构造方法是私有的,不可以直接创建,但可以通过Pattern.complie(String regex)简单工厂方法创建一个正则表达式, </p><p>pattern() 返回正则表达式的字符串形式,其实就是返回Pattern.complile(String regex)的regex参数</p></li><li><p>Matcher类的构造方法也是私有的,不能随意创建,只能通过Pattern.matcher(CharSequence input)方法得到该类的实例.<br>Pattern类只能做一些简单的匹配操作,要想得到更强更便捷的正则匹配操作,那就需要将Pattern与Matcher一起合作.Matcher类提供了对正则表达式的分组支持,以及对正则表达式的多次匹配支持. </p><p>Matcher类提供三个匹配操作方法,三个方法均返回boolean类型,当匹配到时返回true,没匹配到则返回false<br>matches()对整个字符串进行匹配,只有整个字符串都匹配了才返回true </p></li><li><p>Matcher.find()对字符串进行匹配,匹配到的字符串可以在任何位置. </p></li><li><p>只要是”^”这个字符是在中括号”[]”中被使用的话就是表示字符类的否定，如果不是的话就是表示限定开头</p><p>[^a-zA-Z0-9] 中^匹配不是26大小写与数字的字符</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">            String str = sc.next();</span><br><span class="line">            <span class="keyword">if</span>(str.length() &lt;= <span class="number">8</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;NG&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(getMatch(str))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;NG&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(getString(str, <span class="number">0</span>, <span class="number">3</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;NG&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验是否有重复子串</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getString</span><span class="params">(String str, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &gt;= str.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str.substring(r).contains(str.substring(l, r))) &#123;</span><br><span class="line">            <span class="comment">//重载Contains(Char, StringComparison)使用指定的比较规则返回一个值，该值指示指定的字符是否出现在此字符串中</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getString(str,l+<span class="number">1</span>,r+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否满足正则</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getMatch</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Pattern p1 = Pattern.compile(<span class="string">&quot;[A-Z]&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(p1.matcher(str).find())&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        Pattern p2 = Pattern.compile(<span class="string">&quot;[a-z]&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(p2.matcher(str).find())&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        Pattern p3 = Pattern.compile(<span class="string">&quot;[0-9]&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(p3.matcher(str).find())&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        Pattern p4 = Pattern.compile(<span class="string">&quot;[^a-zA-Z0-9]&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(p4.matcher(str).find())&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-密码加密"><a href="#3-密码加密" class="headerlink" title="3.密码加密"></a>3.密码加密</h1><h2 id="1-简答密码"><a href="#1-简答密码" class="headerlink" title="1.简答密码"></a>1.简答密码</h2><p>密码是我们生活中非常重要的东东，我们的那么一点不能说的秘密就全靠它了。<br>哇哈哈. 接下来渊子要在密码之上再加一套密码，虽然简单但也安全。假设渊子原来一个BBS上的密码为zvbo9441987,为了方便记忆，他通过一种算法把这个密码变换成YUANzhi1987，这个密码是他的名字和出生年份，怎么忘都忘不了，而且可以明目张胆地放在显眼的地方而不被别人知道真正的密码。<br>他是这么变换的，大家都知道手机上的字母：<br>1–1， abc–2, def–3, ghi–4, jkl–5, mno–6, pqrs–7, tuv–8 wxyz–9, 0–0,就这么简单，渊子把密码中出现的小写字母都变成对应的数字，数字和其他的符号都不做变换。<br>声明：密码中没有空格，而密码中出现的大写字母则变成小写之后往后移一位，如：X，先变成小写，再往后移一位，不就是y了嘛，简单吧。记住，z往后移是a哦。<br>输入描述:<br>输入包括多个测试数据。输入是一个明文，密码长度不超过100个字符，输入直到文件结尾<br>输出描述:<br>输出渊子真正的密文<br>输入<br>YUANzhi1987<br>输出<br>zvbo9441987</p><ul><li>我们可以设置2个数组，用其对应的下标来让其匹配与转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 简单密码 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String str = sc.next();</span><br><span class="line">    String str1 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">    String str2 = <span class="string">&quot;bcdefghijklmnopqrstuvwxyza222333444555666777788899990123456789&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>[] ch1 = str1.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] ch2 = str2.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ch1.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.charAt(i) == ch1[j])</span><br><span class="line">            System.out.print(ch2[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-字符串加密"><a href="#2-字符串加密" class="headerlink" title="2.字符串加密"></a>2.字符串加密</h2><p>已知一段消息由26个小写字母和0-9这10个数字构成。<br>现在需要设计一种简单的字典加密法和解密法，把消息加密为简单密文，或者把一段密文还原为原文。<br>说明:<br>本字典加解密算法中用的字典由36个字符组成，分别为:<br>abcdefghijkimnopqrstuvwxyz0123456789，加密前、后的字符串也是由这36个字符组成。<br>输入字典格式为36个字符组成的串D。串中每个字符表示A中对应位置处的字符加密后的结果，如<br>A:abcdefghijklmnopqrstuvwxyz0123456789<br>D:fghijklmnopqrstuvwxyz0123456789abcde<br>表示a=&gt;f,b=&gt;g..0=&gt;5..9=&gt;e<br>请根据输入对字符串进行加密或解密。<br>输入描述:<br>第一行是字典，由36个字符数字组成，具体含义见题目中的相关说明。<br>第二行是模式，1表示加密，0表示解密<br>第三行是待加密字符串或待解密字符串，长度小于10000<br>输出描述:<br>使用对应字典加密或解密后的字符串。<br>示例1输入输出示例仅供调试，后台判题数据-般不包含示例<br>输入:<br>fghijklmnopqrstuvwxyz0123456789abcde<br>1<br>a3579hello<br>输出:<br>f8acemjqqt</p><ul><li>由我们输入加密的字典，并且来主动控制是解密还是加密！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 字符串加密 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String D = sc.nextLine();</span><br><span class="line">    String A = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span>[] ch1 = A.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] ch2 = D.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> flag = sc.nextInt();</span><br><span class="line">    String input = sc.next();</span><br><span class="line">    <span class="comment">/*加密过程，当找到字符在A中的位置，输出字典D中对应位置的字符*/</span></span><br><span class="line">    <span class="keyword">if</span> ((flag == <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ch1.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (input.charAt(i) == ch1[j])</span><br><span class="line">            System.out.print(ch2[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*解密过程，当找到字符在字典D中的位置，输出A中对应位置的字符*/</span></span><br><span class="line">    <span class="keyword">if</span> ((flag == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ch2.length; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (input.charAt(i) == ch2[j])</span><br><span class="line">            System.out.print(ch1[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-字符串加解密"><a href="#3-字符串加解密" class="headerlink" title="3.字符串加解密"></a>3.字符串加解密</h2><p>1、对输入的字符串进行加解密，并输出。<br>2加密方法为：<br>当内容是英文字母时则用该英文字母的后一个字母替换，同时字母变换大小写,如字母a时则替换为B；字母Z时则替换为a；<br>当内容是数字时则把该数字加1，如0替换1，1替换2，9替换0；<br>其他字符不做变化。<br>3、解密方法为加密的逆过程。</p><p>说明：<br>1、字符串以\0结尾。<br>2、字符串最长100个字符。<br>输入描述:<br>输入一串要加密的密码<br>输入一串加过密的密码<br>输出描述:<br>输出加密后的字符<br>输出解密后的字符<br>示例1<br>输入<br>abcdefg<br>BCDEFGH<br>输出<br>BCDEFGH<br>abcdefg</p><ul><li>同时处理加密与解密，即用两个数组加密与解密字典。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class 字符串加解密 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    String str1 = sc.next();// 要加密的字符串</span><br><span class="line">    String str2 = sc.next();// 要解密的字符串</span><br><span class="line">    String JIA = &quot;&quot;;</span><br><span class="line">    String JIE = &quot;&quot;;</span><br><span class="line">    String strA = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;</span><br><span class="line">    String strB = &quot;bcdefghijklmnopqrstuvwxyzaBCDEFGHIJKLMNOPQRSTUVWXYZA1234567890&quot;;//加密字典</span><br><span class="line">    String strC = &quot;zabcdefghijklmnopqrstuvwxyZABCDEFGHIJKLMNOPQRSTUVWXY9012345678&quot;;//解密字典</span><br><span class="line">    char[] ch1 = strA.toCharArray();</span><br><span class="line">    char[] ch2 = strB.toCharArray();</span><br><span class="line">    char[] ch3 = strC.toCharArray();</span><br><span class="line">    //加密过程</span><br><span class="line">    for (int i = 0; i &lt; str1.length(); i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; ch1.length; j++) &#123;</span><br><span class="line">        if (str1.charAt(i) == ch1[j])</span><br><span class="line">            JIA = JIA + ch2[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //解密过程</span><br><span class="line">    for (int i = 0; i &lt; str2.length(); i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; ch2.length; j++) &#123;</span><br><span class="line">        if (str2.charAt(i) == ch1[j])</span><br><span class="line">            JIE = JIE + ch3[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(JIA);</span><br><span class="line">    System.out.println(JIE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试题</title>
      <link href="/xg-123456.gtihub.io/2021/10/05/bi-shi-ti/"/>
      <url>/xg-123456.gtihub.io/2021/10/05/bi-shi-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-数字颠倒"><a href="#1-数字颠倒" class="headerlink" title="1.数字颠倒"></a>1.数字颠倒</h1><p>题目：将输入的字符串反向输出</p><ul><li><p>next()不会吸取字符前/后的空格/Tab键，只吸取字符，开始吸取字符（字符前后不算）直到遇到空格/Tab键/回车截止吸取  </p></li><li><p>nextLine()吸取字符前后的空格/Tab键，回车键截止。</p></li><li><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><p>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</p></li><li><p>reverse()反转方法</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">public class Main&#123;</span><br><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">Scanner in=new Scanner(System.in);</span><br><span class="line">String str=in.nextLine();</span><br><span class="line">StringBuffer rs=new StringBuffer(str);</span><br><span class="line">rs.reverse();</span><br><span class="line">System.out.println(rs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-句子逆序"><a href="#2-句子逆序" class="headerlink" title="2.句子逆序"></a>2.句子逆序</h1><p>题目：输入一个英文语句，每个单词用空格隔开。保证输入只包含空格和字母。</p><ul><li><p>理解java输入hasNext()和hasNextLine()方法的区别     </p><p>hasNext()方法会认为之后再没有非空字符,会返回一个<code>false</code></p><p>hasNextLine()方法会认为换行符\n是一个空行,符合行的匹配模式,则会返回一个<code>true</code>,但实际上由于之后再没有数据了,所以会在读取输入流的时候发生异常,从而导致整个运行报错。</p><p>因此解决这个问题的话：采用hasNextXxxx() 的话，后面也要用nextXxxx()</p></li><li><p>split() 方法用于把一个字符串分割成字符串数组。</p><p>之后依据分格的数组输出即可。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"> </span><br><span class="line">public class Main&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner scan = new Scanner(System.in);</span><br><span class="line">        while (scan.hasNextLine())&#123;</span><br><span class="line">            String s = scan.nextLine();</span><br><span class="line">            String [] arr = s.split(&quot; &quot;);</span><br><span class="line">            for (int i = arr.length - 1; i &gt;= 0; i--)&#123;</span><br><span class="line">                System.out.print(i == 0 ? arr[i] : arr[i] + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-字符串排序"><a href="#3-字符串排序" class="headerlink" title="3.字符串排序"></a>3.字符串排序</h1><p>题目:给定n个字符串，请对n个字符串按照字典序排列。</p><ul><li><p>Arrays.sort()方法：该方法是Arrays类的静态方法，用于对数组排序。</p><p>1、Arrays.sort(int[] a)</p><p>这种形式是对一个数组的所有元素进行排序，并且是按从小到大的顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">  </span><br><span class="line"> public class Main &#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">          </span><br><span class="line">         int[] a = &#123;9, 8, 7, 2, 3, 4, 1, 0, 6, 5&#125;;</span><br><span class="line">         Arrays.sort(a);</span><br><span class="line">         for(int i = 0; i &lt; a.length; i ++) &#123;</span><br><span class="line">              System.out.print(a[i] + &quot; &quot;);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、Arrays.sort(int[] a, int fromIndex, int toIndex)</p><p>这种形式是对数组部分排序，也就是对数组a的下标从fromIndex到toIndex-1的元素排序.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        </span><br><span class="line">        int[] a = &#123;9, 8, 7, 2, 3, 4, 1, 0, 6, 5&#125;;</span><br><span class="line">        Arrays.sort(a, 0, 3);</span><br><span class="line">        for(int i = 0; i &lt; a.length; i ++) &#123;</span><br><span class="line">            System.out.print(a[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、public static void sort(T[] a,int fromIndex,int toIndex, Comparator c) （可以自定义排序规则）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> 1 package test;</span><br><span class="line"> 2 </span><br><span class="line"> 3 import java.util.Arrays;</span><br><span class="line"> 4 import java.util.Comparator;</span><br><span class="line"> 5 </span><br><span class="line"> 6 public class Main &#123;</span><br><span class="line"> 7     public static void main(String[] args) &#123;</span><br><span class="line"> 8         //注意，要想改变默认的排列顺序，不能使用基本类型（int,double, char）</span><br><span class="line"> 9         //而要使用它们对应的类</span><br><span class="line">10         Integer[] a = &#123;9, 8, 7, 2, 3, 4, 1, 0, 6, 5&#125;;</span><br><span class="line">11         //定义一个自定义类MyComparator的对象</span><br><span class="line">12         Comparator cmp = new MyComparator();</span><br><span class="line">13         Arrays.sort(a, cmp);</span><br><span class="line">14         for(int i = 0; i &lt; a.length; i ++) &#123;</span><br><span class="line">15             System.out.print(a[i] + &quot; &quot;);</span><br><span class="line">16         &#125;</span><br><span class="line">17     &#125;</span><br><span class="line">18 &#125;</span><br><span class="line">19 //Comparator是一个接口</span><br><span class="line">21 class MyComparator implements Comparator&lt;Integer&gt;&#123;</span><br><span class="line">22     @Override</span><br><span class="line">23     public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">24         //如果n1小于n2，我们就返回正值，如果n1大于n2我们就返回负值，</span><br><span class="line">25         //这样颠倒一下，就可以实现反向排序了</span><br><span class="line">26         if(o1 &lt; o2) &#123; </span><br><span class="line">27             return 1;</span><br><span class="line">28         &#125;else if(o1 &gt; o2) &#123;</span><br><span class="line">29             return -1;</span><br><span class="line">30         &#125;else &#123;</span><br><span class="line">31             return 0;</span><br><span class="line">32         &#125;</span><br><span class="line">33     &#125;</span><br><span class="line">34     </span><br><span class="line">35 &#125;</span><br></pre></td></tr></table></figure><ul><li><p>题目解法</p></li><li><p>nextInt()方法在扫描到空白符的时候会将前面的数据读取走，但会丢下空白符“\r”在缓冲区中，但是，nextLine()方法在扫描的时候会将扫描到的空白符一同清理掉。</p><p>了解了这两个方法特性和区别，就知道了上边的代码究竟是怎么回事，以及知道了解决的方法。像是上边的代码nextInt()方法之后在缓冲区中留下了“\r”，然后nextLine()方法再去缓冲区找数据的时候首先看到了“\r”，然后就把这个“\r”扫描接收进来，并在缓冲区内清除掉。其实，nextLine()方法是执行过的，并没有不执行。</p><p>因此在代码13行添加br.nextLine()消除之前使用nextInt（）的后遗症，让之后的nextLine（）方法能够执行。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"> </span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">         Scanner br = new Scanner(System.in);</span><br><span class="line">        int n = br.nextInt();</span><br><span class="line">        br.nextLine();</span><br><span class="line">        String[] ss = new String[n];</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            ss[i] = br.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Arrays.sort(ss);</span><br><span class="line"> </span><br><span class="line">        for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(ss[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-求int型正整数在内存中存储时1的个数"><a href="#4-求int型正整数在内存中存储时1的个数" class="headerlink" title="4.求int型正整数在内存中存储时1的个数"></a>4.求int型正整数在内存中存储时1的个数</h1><p>题目；输入一个int型的正整数，计算出该int型数据在内存中存储时1的个数。（内存中为二进制存储）</p><ul><li><p>n=n&amp;(n-1)”的直接应用就是去掉“n的二进制”的最后一个1</p><p>eg：5的话就是101，只可以减去2次1，因此计算出的1个数为2个。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"> </span><br><span class="line">public class Main&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Scanner in = new Scanner(System.in);</span><br><span class="line">        int num = in.nextInt();    //读取数字</span><br><span class="line">        int n = 0;    //计数变量</span><br><span class="line">        while(num!=0)</span><br><span class="line">        &#123;</span><br><span class="line">            num = num&amp;(num-1);</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 编程练习（笔试） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.23ssm复习</title>
      <link href="/xg-123456.gtihub.io/2021/09/23/9-23ssm-fu-xi/"/>
      <url>/xg-123456.gtihub.io/2021/09/23/9-23ssm-fu-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SSM复习"><a href="#SSM复习" class="headerlink" title="SSM复习"></a>SSM复习</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>学习ssm框架概念<br>MVC是model+ view + controller<br>SSM 是spring + springMVC + mybatis</p><h2 id="2-关系示意图"><a href="#2-关系示意图" class="headerlink" title="2.关系示意图"></a>2.关系示意图</h2><p><strong>记住两句话:业务层调数据层。控制层调业务层</strong> </p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210923161607393.png" alt="image-20210923161607393"> </p><h2 id="3-各层介绍"><a href="#3-各层介绍" class="headerlink" title="3.各层介绍"></a>3.各层介绍</h2><ul><li>DAO(mapper)，DAO= Data Acess Object, 数据持久层，对数据库进行持久化操作，负责跟数据库打交道。通常我们在DAO层里写接口，里面有与数据打交道的方法。SQL语句通常写在mapper.xml文件里。</li><li>Service,业务层或服务层，主要负责业务模块的逻辑应用设计。 Service层的实现，具体调用到已经定义的DAO接口，封装service层的业务逻辑有利于通用的业业务逻辑的独立性和重复利用性。如果把Dao层当作积木，那么Service层则是对积木的搭建。</li><li>Controller, 负责具体的业务模块流程的控制。此层要调用Service层的接口去控制业务流程。</li><li>Pojo 全称Plain Ordinary Java Object ，数据库实体类，有的地方也直接写成entity。也可以理解为domain，一般是跟数据库对应好的一个实体类。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.16学习日记</title>
      <link href="/xg-123456.gtihub.io/2021/09/16/9-16-xue-xi-ri-ji/"/>
      <url>/xg-123456.gtihub.io/2021/09/16/9-16-xue-xi-ri-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="springboot日记"><a href="#springboot日记" class="headerlink" title="springboot日记"></a>springboot日记</h1><h2 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot配置文件</h2><ul><li>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的<br>application.properties<br>语法结构 ：key=value<br>application.yml<br>语法结构 ：key：空格 value  </li><li>yaml配置(切记空格不能少)：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server：  </span><br><span class="line">  prot: 8080</span><br></pre></td></tr></table></figure></li><li>语法要求严格！</li></ul><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的  </p><h2 id="yaml注入配置文件实例"><a href="#yaml注入配置文件实例" class="headerlink" title="yaml注入配置文件实例"></a>yaml注入配置文件实例</h2><ul><li>编写一个实体类 Dog；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component  //注册bean到容器中</span><br><span class="line">public class Dog &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    </span><br><span class="line">    //有参无参构造、get、set方法、toString()方法  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写一个实体类Person<br>@ConfigurationProperties(prefix = “person”)//yml文件自动匹配 默认从全局配置文件中获取值；<br>@PropertySource(value = “classpath:xxx.properties”) ：加载指定的配置文件；这样的也可以完成注入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Component //注册bean</span><br><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Boolean happy;</span><br><span class="line">    private Date birth;</span><br><span class="line">    private Map&lt;String,Object&gt; maps;</span><br><span class="line">    private List&lt;Object&gt; lists;</span><br><span class="line">    private Dog dog;</span><br><span class="line">    </span><br><span class="line">    //有参无参构造、get、set方法、toString()方法  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在application.yml中编写<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">  name: qinjiang</span><br><span class="line">  age: 3</span><br><span class="line">  happy: false</span><br><span class="line">  birth: 2000/01/01</span><br><span class="line">  maps: &#123;k1: v1,k2: v2&#125;</span><br><span class="line">  lists:</span><br><span class="line">   - code</span><br><span class="line">   - girl</span><br><span class="line">   - music</span><br><span class="line">  dog:</span><br><span class="line">    name: 旺财</span><br><span class="line">    age: 1</span><br></pre></td></tr></table></figure></li><li>test类<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class DemoApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    Person person; //将person自动注入进来</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void contextLoads() &#123;</span><br><span class="line">        System.out.println(person); //打印person信息</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件占位符<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">    name: qinjiang$&#123;random.uuid&#125; # 随机uuid</span><br><span class="line">    age: $&#123;random.int&#125;  # 随机int</span><br><span class="line">    happy: false</span><br><span class="line">    birth: 2000/01/01</span><br><span class="line">    maps: &#123;k1: v1,k2: v2&#125;</span><br><span class="line">    lists:</span><br><span class="line">      - code</span><br><span class="line">      - girl</span><br><span class="line">      - music</span><br><span class="line">    dog:</span><br><span class="line">      name: $&#123;person.hello:other&#125;_旺财</span><br><span class="line">      age: 1</span><br></pre></td></tr></table></figure><h3 id="value跟-ConfigurationProperties对比"><a href="#value跟-ConfigurationProperties对比" class="headerlink" title="@value跟@ConfigurationProperties对比"></a>@value跟@ConfigurationProperties对比</h3></li><li>1、@ConfigurationProperties只需要写一次即可 ，@Value则需要每个字段都添加。<br>2、松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。<br>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性。<br>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持。<h2 id="添加JSR303数据校验"><a href="#添加JSR303数据校验" class="headerlink" title="添加JSR303数据校验"></a>添加JSR303数据校验</h2>&ensp;&ensp;Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component //注册bean</span><br><span class="line">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="line">@Validated  //数据校验</span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    @Email(message=&quot;邮箱格式错误&quot;) //name必须是邮箱格式</span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如果@Email报错添加 是因为新版本需要validation启动器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;​</span><br></pre></td></tr></table></figure></li><li>常见参数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="line">private String userName;</span><br><span class="line">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="line">private int age;</span><br><span class="line">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line">@Null       验证对象是否为null</span><br><span class="line">@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="line">@NotEmpty   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="line">@AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line">@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line">@Length(min=, max=) string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line">@Past       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line">@Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure></li></ul><p>##多环境切换</p><ul><li>yml配置文件中切换不同的环境<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">#选择要激活那个环境块</span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: prod</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">  port: 8083</span><br><span class="line">spring:</span><br><span class="line">  profiles: dev #配置环境的名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8084</span><br><span class="line">spring:</span><br><span class="line">  profiles: prod  #配置环境的名称</span><br></pre></td></tr></table></figure>这是使用内嵌tomcat会使用不同的端口号。</li><li>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：<br>优先级1：项目路径下的config文件夹配置文件（file：./config/）<br>优先级2：项目路径下配置文件（file：./）<br>优先级3：资源路径下的config文件夹配置文件（classpath：/config/）<br>优先级4：资源路径下配置文件（classpath：/）  </li></ul><h2 id="Web开发静态资源"><a href="#Web开发静态资源" class="headerlink" title="Web开发静态资源"></a>Web开发静态资源</h2><ul><li>首先观看静态资源映射规则：<br>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；<br>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">    if (!this.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        // 已禁用默认资源处理</span><br><span class="line">        logger.debug(&quot;Default resource handling disabled&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 缓存控制</span><br><span class="line">    Duration cachePeriod = this.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    // webjars 配置</span><br><span class="line">    if (!registry.hasMappingForPattern(&quot;/webjars/**&quot;)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(&quot;/webjars/**&quot;)</span><br><span class="line">                                             .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    // 静态资源配置</span><br><span class="line">    String staticPathPattern = this.mvcProperties.getStaticPathPattern();</span><br><span class="line">    if (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以发现比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；<br>之后去找staticPathPattern发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去resourceProperties 这个类：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 进入方法</span><br><span class="line">public String[] getStaticLocations() &#123;</span><br><span class="line">    return this.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line">// 找到对应的值</span><br><span class="line">private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">// 找到路径</span><br><span class="line">private static final String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; </span><br><span class="line">    &quot;classpath:/META-INF/resources/&quot;,</span><br><span class="line">  &quot;classpath:/resources/&quot;, </span><br><span class="line">    &quot;classpath:/static/&quot;, </span><br><span class="line">    &quot;classpath:/public/&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可以得出<br>“classpath:/META-INF/resources/“<br>“classpath:/resources/“<br>“classpath:/static/“<br>“classpath:/public/“<br>这4个静态资源路基springbott可以访问  </li><li>在public 中创建 index.html<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>然后访问tomcat 判断是否成功<h2 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h2></li><li>添加启动器依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--thymeleaf--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>Thymeleaf的自动配置类：ThymeleafProperties<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(</span><br><span class="line">    prefix = &quot;spring.thymeleaf&quot;</span><br><span class="line">)</span><br><span class="line">public class ThymeleafProperties &#123;</span><br><span class="line">    private static final Charset DEFAULT_ENCODING;</span><br><span class="line">    public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;</span><br><span class="line">    public static final String DEFAULT_SUFFIX = &quot;.html&quot;;</span><br><span class="line">    private boolean checkTemplate = true;</span><br><span class="line">    private boolean checkTemplateLocation = true;</span><br><span class="line">    private String prefix = &quot;classpath:/templates/&quot;;</span><br><span class="line">    private String suffix = &quot;.html&quot;;</span><br><span class="line">    private String mode = &quot;HTML&quot;;</span><br><span class="line">    private Charset encoding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写一个TestController<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class TestController &#123;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;/t1&quot;)</span><br><span class="line">    public String test1()&#123;</span><br><span class="line">        //classpath:/templates/test.html</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>启动项目测试<h2 id="Thymeleaf-语法学习"><a href="#Thymeleaf-语法学习" class="headerlink" title="Thymeleaf 语法学习"></a>Thymeleaf 语法学习</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    1）、获取对象的属性、调用方法</span><br><span class="line">    2）、使用内置的基本对象：#18</span><br><span class="line">         #ctx : the context object.</span><br><span class="line">         #vars: the context variables.</span><br><span class="line">         #locale : the context locale.</span><br><span class="line">         #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">         #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">         #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">         #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line"></span><br><span class="line">    3）、内置的一些工具对象：</span><br><span class="line">　　　　　　#execInfo : information about the template being processed.</span><br><span class="line">　　　　　　#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">　　　　　　#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">　　　　　　#numbers : methods for formatting numeric objects.</span><br><span class="line">　　　　　　#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">　　　　　　#objects : methods for objects in general.</span><br><span class="line">　　　　　　#bools : methods for boolean evaluation.</span><br><span class="line">　　　　　　#arrays : methods for arrays.</span><br><span class="line">　　　　　　#lists : methods for lists.</span><br><span class="line">　　　　　　#sets : methods for sets.</span><br><span class="line">　　　　　　#maps : methods for maps.</span><br><span class="line">　　　　　　#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">==================================================================================</span><br><span class="line"></span><br><span class="line">  Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">  Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">  Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">  Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line"></span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span><br><span class="line">      Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">      Boolean literals: true , false</span><br><span class="line">      Null literal: null</span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">      </span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">    </span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">    </span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">    </span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">    </span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">    </span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.15学习日记</title>
      <link href="/xg-123456.gtihub.io/2021/09/15/9-15-xue-xi-ri-ji/"/>
      <url>/xg-123456.gtihub.io/2021/09/15/9-15-xue-xi-ri-ji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日记（springboot学习第一日）"><a href="#日记（springboot学习第一日）" class="headerlink" title="日记（springboot学习第一日）"></a>日记（springboot学习第一日）</h1><h2 id="注解复习"><a href="#注解复习" class="headerlink" title="注解复习"></a>注解复习</h2><p>1、@controller：   controller控制器层（注入服务）<br>2、@service ：      service服务层（注入dao）<br>3、@repository ：  dao持久层（实现dao访问）<br>4、@component：  标注一个类为Spring容器的Bean，（把普通pojo实例化到spring容器中，相当于配置文件中的bean标签</p><h2 id="第一个springboot项目"><a href="#第一个springboot项目" class="headerlink" title="第一个springboot项目"></a>第一个springboot项目</h2><ul><li>开发工具 IDEA<br>1、创建一个新项目<br>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现<br>3、填写项目信息<br>4、选择初始化的组件（初学勾选 Web 即可）<br>5、填写项目路径<br>6、等待项目构建成功<h2 id="项目结构分析："><a href="#项目结构分析：" class="headerlink" title="项目结构分析："></a>项目结构分析：</h2></li><li>pom.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    &lt;dependencies&gt;</span><br><span class="line">&lt;!--        启动器--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;!--默认springboot你要这个依赖 要自己添加 切记！！！！！！--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;  </span><br></pre></td></tr></table></figure></li><li>如果tomcat端口号变更过的话需要在application.properties编写端口号<br>server.port = 你修改的端口号<br>springboot默认使用tomcat 8080端口号！  </li><li>默认的主启动类 SpringbootApplication<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">     //以为是启动了一个方法，没想到启动了一个服务</span><br><span class="line">      SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@SpringBootApplication注解<br>作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用。<br>进入这个注解发现里面两个核心注解  </li><li>@SpringBootConfiguration<br>作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；继续进去这个注解查看<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 点进去得到下面的 @Component</span><br><span class="line">@Configuration</span><br><span class="line">public @interface SpringBootConfiguration &#123;&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public @interface Configuration &#123;&#125;</span><br></pre></td></tr></table></figure>@Configuration，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件。<br>@Component：  标注一个类为Spring容器的Bean，（把普通pojo实例化到spring容器中，相当于配置文件中的</li><li>@EnableAutoConfiguration<br>作用：@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；<br>里面有：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(AutoConfigurationImportSelector.class)</span><br></pre></td></tr></table></figure></li><li>@AutoConfigurationPackage ：自动配置包</li><li>@import ：Spring底层注解@import ， 给容器中导入一个组件<br>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</li><li>@Import(AutoConfigurationImportSelector.class)中的<br>AutoConfigurationImportSelector.class作用：AutoConfigurationImportSelector ：自动配置导入选择器<br>1、这个类中有一个这样的方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br><span class="line">+ &quot;are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>getCandidateConfigurations获取候选配置<br>2、这个方法又调用了  SpringFactoriesLoader 类的静态方法！<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) &#123;</span><br><span class="line">      ClassLoader classLoaderToUse = classLoader;</span><br><span class="line">      if (classLoader == null) &#123;</span><br><span class="line">          classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      String factoryTypeName = factoryType.getName();</span><br><span class="line">      return (List)loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>3、这个方法返回了 loadSpringFactories ！<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enumeration urls = classLoader.getResources(&quot;META-INF/spring.factories&quot;);</span><br></pre></td></tr></table></figure>4、发现一个多次出现的文件：spring.factories，全局搜索它<br>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！</li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习</title>
      <link href="/xg-123456.gtihub.io/2021/09/15/mysql-lian-xi/"/>
      <url>/xg-123456.gtihub.io/2021/09/15/mysql-lian-xi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL练习"><a href="#MySQL练习" class="headerlink" title="MySQL练习"></a>MySQL练习</h1><h2 id="查找入职员工某排名第几位的员工所有信息-此类题目"><a href="#查找入职员工某排名第几位的员工所有信息-此类题目" class="headerlink" title="查找入职员工某排名第几位的员工所有信息 此类题目"></a>查找入职员工某排名第几位的员工所有信息 此类题目</h2><ul><li>limit<br>分页，限制数据显示。<br>select *from emp limit 5;  # 限制前5条数据<br>select *from emp limit 5, 5;  # 从第5条开始，查询5条数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 排名属性 <span class="keyword">desc</span> limit x,x</span><br></pre></td></tr></table></figure><h2 id="两个表连接问题"><a href="#两个表连接问题" class="headerlink" title="两个表连接问题"></a>两个表连接问题</h2></li><li>查找当前薪水详情以及部门编号dept_no</li><li>表格数据<br>![0P_0KYOV6VJO2`~G_1R7_B2.png](<a href="https://i.loli.net/2021/09/15/1xH8OutMR65lXYS.png">https://i.loli.net/2021/09/15/1xH8OutMR65lXYS.png</a>)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select sa.emp_no, sa.salary , sa.from_date,sa.to_date, de.dept_no</span><br><span class="line">from salaries sa </span><br><span class="line">right join dept_manager de </span><br><span class="line">on sa.emp_no=de.emp_no</span><br></pre></td></tr></table></figure></li><li>重点区分左右连接区别（下图左边右连接 右边左连接）<br><img src="https://i.loli.net/2021/09/15/nKPRJryFA24SBfQ.png" alt="_E~NW_B8LD_MH081PEW9I09.png"></li><li>查找所有已经分配部门的员工的last_name和first_name以及dept_no</li><li>表格数据<br><img src="https://i.loli.net/2021/09/15/nJlq1edH2RXpVuz.png" alt="N_G_Q8_J1_HN~MA8R@P4JKV.png"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select sa.last_name, sa.first_name , de.dept_no</span><br><span class="line">from employees sa </span><br><span class="line">right join dept_emp de </span><br><span class="line">on sa.emp_no=de.emp_no</span><br></pre></td></tr></table></figure><ul><li>查找所有员工的last_name和first_name以及对应部门编号dept_no</li><li>（请你查找所有已经分配部门的员工的last_name和first_name以及dept_no，也包括暂时没有分配具体部门的员工）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select sa.last_name, sa.first_name , de.dept_no</span><br><span class="line">from employees sa </span><br><span class="line">left join dept_emp de </span><br><span class="line">on sa.emp_no=de.emp_no</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/15/XpL17DHuQShNf4c.png" alt="NA0_KK__YXI_P5``27QL_DG.png"></li></ul><h2 id="查找薪水记录超过15次的员工号emp-no以及其对应的记录次数t"><a href="#查找薪水记录超过15次的员工号emp-no以及其对应的记录次数t" class="headerlink" title="查找薪水记录超过15次的员工号emp_no以及其对应的记录次数t"></a>查找薪水记录超过15次的员工号emp_no以及其对应的记录次数t</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select emp_no,COUNT(emp_no)as t</span><br><span class="line">from salaries</span><br><span class="line">GROUP BY emp_no</span><br><span class="line">HAVING t&gt;15</span><br></pre></td></tr></table></figure><h2 id="获取所有非管理的员工的emp-no"><a href="#获取所有非管理的员工的emp-no" class="headerlink" title="获取所有非管理的员工的emp_no"></a>获取所有非管理的员工的emp_no</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.emp_no</span><br><span class="line">FROM employees AS a</span><br><span class="line">LEFT JOIN dept_manager AS b</span><br><span class="line">on a.emp_no = b.emp_no</span><br><span class="line">where dept_no is NULL</span><br></pre></td></tr></table></figure><ul><li>知识点回忆<br>on跟where的区别<br>外连接时，on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。而where条件是在临时表生成好后，再对临时表进行过滤的条件。</li></ul><h2 id="获取所有员工当前的manager"><a href="#获取所有员工当前的manager" class="headerlink" title="获取所有员工当前的manager"></a>获取所有员工当前的manager</h2><ul><li>我一开始想法  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT a.emp_no,b.emp_no as manager</span><br><span class="line">FROM dept_emp AS a</span><br><span class="line">left JOIN dept_manager AS b</span><br><span class="line">on a.emp_no &lt;&gt; b.emp_no and a.dept_no = b.dept_no</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/16/A8iPs6Q7wUmNE9j.png" alt="PTH__D5NNUH_3_X__Y@YKJR.png"></li><li>正确答案  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT a.emp_no,b.emp_no as manager</span><br><span class="line">FROM dept_emp AS a</span><br><span class="line">left JOIN dept_manager AS b</span><br><span class="line">on a.dept_no = b.dept_no</span><br><span class="line">where a.emp_no not in (</span><br><span class="line">    select emp_no</span><br><span class="line">    from dept_manager</span><br><span class="line">);</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/16/v3RLHKWmVsJoa2e.png" alt="_@CAPCZ__IR1ZOGY_JRC1_N.png"><h2 id="获取每个部门中当前员工薪水最高的相关信息"><a href="#获取每个部门中当前员工薪水最高的相关信息" class="headerlink" title="获取每个部门中当前员工薪水最高的相关信息"></a>获取每个部门中当前员工薪水最高的相关信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select d.dept_no,d.emp_no,salary</span><br><span class="line">from dept_emp d</span><br><span class="line">join salaries s</span><br><span class="line">on d.emp_no=s.emp_no</span><br><span class="line">where (d.dept_no,salary) in</span><br><span class="line">(select d.dept_no,max(s.salary)as maxSalary</span><br><span class="line">from dept_emp d,salaries s</span><br><span class="line">where d.emp_no=s.emp_no</span><br><span class="line">group by d.dept_no)</span><br><span class="line">order by d.dept_no</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="中秋节补档"><a href="#中秋节补档" class="headerlink" title="中秋节补档"></a>中秋节补档</h1><h2 id="9月17"><a href="#9月17" class="headerlink" title="9月17"></a>9月17</h2><h2 id="统计出当前各个title类型对应的员工当前薪水对应的平均工资"><a href="#统计出当前各个title类型对应的员工当前薪水对应的平均工资" class="headerlink" title="统计出当前各个title类型对应的员工当前薪水对应的平均工资"></a>统计出当前各个title类型对应的员工当前薪水对应的平均工资</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT t.title , AVG(s.salary) AS avgsalary</span><br><span class="line">FROM titles t</span><br><span class="line">JOIN salaries s</span><br><span class="line">where t.emp_no = s.emp_no</span><br><span class="line">GROUP BY t.title</span><br><span class="line">ORDER BY avgsalary </span><br></pre></td></tr></table></figure><h2 id="查找所有员工的last-name和first-name以及对应的dept-name-多表链接！！！"><a href="#查找所有员工的last-name和first-name以及对应的dept-name-多表链接！！！" class="headerlink" title="查找所有员工的last_name和first_name以及对应的dept_name(多表链接！！！)"></a>查找所有员工的last_name和first_name以及对应的dept_name(多表链接！！！)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3表链接查询</span><br><span class="line">select e.last_name,e.first_name,d.dept_name</span><br><span class="line">from employees e </span><br><span class="line">left join dept_emp de on e.emp_no=de.emp_no</span><br><span class="line">left join departments d on de.dept_no=d.dept_no</span><br></pre></td></tr></table></figure><ul><li>数据库表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `departments` (</span><br><span class="line">`dept_no` char(4) NOT NULL,</span><br><span class="line">`dept_name` varchar(40) NOT NULL,</span><br><span class="line">PRIMARY KEY (`dept_no`));</span><br><span class="line"></span><br><span class="line">CREATE TABLE `dept_emp` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`dept_no` char(4) NOT NULL,</span><br><span class="line">`from_date` date NOT NULL,</span><br><span class="line">`to_date` date NOT NULL,</span><br><span class="line"></span><br><span class="line">PRIMARY KEY (`emp_no`,`dept_no`));</span><br><span class="line">CREATE TABLE `employees` (</span><br><span class="line">`emp_no` int(11) NOT NULL,</span><br><span class="line">`birth_date` date NOT NULL,</span><br><span class="line">`first_name` varchar(14) NOT NULL,</span><br><span class="line">`last_name` varchar(16) NOT NULL,</span><br><span class="line">`gender` char(1) NOT NULL,</span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`));</span><br></pre></td></tr></table></figure><h2 id="9月18"><a href="#9月18" class="headerlink" title="9月18"></a>9月18</h2><h2 id="获取员工其当前的薪水比其manager当前薪水还高的相关信息（一表多用！）"><a href="#获取员工其当前的薪水比其manager当前薪水还高的相关信息（一表多用！）" class="headerlink" title="获取员工其当前的薪水比其manager当前薪水还高的相关信息（一表多用！）"></a>获取员工其当前的薪水比其manager当前薪水还高的相关信息（一表多用！）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select de.emp_no,</span><br><span class="line">       dm.emp_no as manager_no,</span><br><span class="line">       s1.salary as emp_salary,</span><br><span class="line">       s2.salary as manager_salary</span><br><span class="line">from dept_emp de,dept_manager dm,salaries s1,salaries s2</span><br><span class="line">where de.dept_no=dm.dept_no</span><br><span class="line">and de.emp_no=s1.emp_no</span><br><span class="line">and dm.emp_no=s2.emp_no</span><br><span class="line">and s1.salary&gt;s2.salary</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/09/21/ej3IPgFsrcQCKdA.png" alt="_D~T_TTQ7_U@HA_7_4QLFXJ.png"></li></ul><h2 id="使用子查询的方式找出属于Action分类的所有电影对应的title-description"><a href="#使用子查询的方式找出属于Action分类的所有电影对应的title-description" class="headerlink" title="使用子查询的方式找出属于Action分类的所有电影对应的title,description"></a>使用子查询的方式找出属于Action分类的所有电影对应的title,description</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select f.title,f.description</span><br><span class="line">from film f</span><br><span class="line">join film_category fc </span><br><span class="line">on f.film_id=fc.film_id</span><br><span class="line">WHERE fc.category_id = (</span><br><span class="line">    select category_id from category where name = &#x27;Action&#x27;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="9月19"><a href="#9月19" class="headerlink" title="9月19"></a>9月19</h2><h2 id="查询结果拼接-cancat"><a href="#查询结果拼接-cancat" class="headerlink" title="查询结果拼接 cancat"></a>查询结果拼接 cancat</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT concat(last_name ,&#x27; &#x27;, first_name) AS name</span><br><span class="line">from employees</span><br></pre></td></tr></table></figure><ul><li>通过concat拼字符串的时候，如果语句里面需要使用单引号，可以使用两个单引号来代替一个引号<br>SELECT concat(last_name ,’’’’, first_name) AS name  from employees  </li></ul><h2 id="mysql中常用的三种插入数据的语句"><a href="#mysql中常用的三种插入数据的语句" class="headerlink" title="mysql中常用的三种插入数据的语句:"></a>mysql中常用的三种插入数据的语句:</h2><p>insert into表示插入数据，数据库会检查主键，如果出现重复会报错；<br>replace into表示插入替换数据，需求表中有PrimaryKey，<br>或者unique索引，如果数据库已经存在数据，则用新数据替换，如果没有数据效果则和insert into一样；<br>insert ignore表示，如果中已经存在相同的记录，则忽略当前新数据；<br>insert ignore into actor values(“3”,”ED”,”CHASE”,”2006-02-15 12:34:33”);</p><p>索引是 MySQL 数据库中的重要对象之一，用于快速找出某个列中有某一特定值的行。 为什么要使用索引 索引是 MySQL 中一种十分重要的数据库对象。它是数据库性能调优技术的基础，常用<br>看大家都用的是sqlite的语法，这里简单提一下关于MySQL中给字段创建索引的四种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name ADD PRIMARY KEY (col_list);</span><br><span class="line">// 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span><br><span class="line">添加唯一索引</span><br><span class="line">ALTER TABLE tbl_name ADD UNIQUE index_name (col_list);</span><br><span class="line">// 这条语句创建索引的值必须是唯一的。</span><br><span class="line">添加普通索引</span><br><span class="line">ALTER TABLE tbl_name ADD INDEX index_name (col_list);</span><br><span class="line">// 添加普通索引，索引值可出现多次。</span><br><span class="line">添加全文索引</span><br><span class="line">ALTER TABLE tbl_name ADD FULLTEXT index_name (col_list);</span><br><span class="line">// 该语句指定了索引为 FULLTEXT ，用于全文索引。</span><br><span class="line">添加强制索引：：强制索引，即指定本次查询使用某个特定的索引，这样就可避免MySQL优化器使用低效的索引。</span><br><span class="line">SELECT *</span><br><span class="line">FROM salaries </span><br><span class="line">FORCE INDEX (idx_emp_no)</span><br><span class="line">WHERE emp_no=10005;</span><br><span class="line">PS: 附赠删除索引的语法：</span><br><span class="line">DROP INDEX index_name ON tbl_name;</span><br><span class="line">// 或者</span><br><span class="line">ALTER TABLE tbl_name DROP INDEX index_name；</span><br><span class="line">ALTER TABLE tbl_name DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名 AS SELECT 查询语句;</span><br><span class="line">eg：</span><br><span class="line">CREATE VIEW actor_name_view</span><br><span class="line">AS </span><br><span class="line">SELECT first_name AS first_name_v, last_name AS last_name_v</span><br><span class="line">FROM actor;</span><br></pre></td></tr></table></figure><h2 id="9月20"><a href="#9月20" class="headerlink" title="9月20"></a>9月20</h2><h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器:"></a>创建触发器:</h2><ul><li>题目:构造一个触发器audit_log，在向employees_test表中插入一条数据的时候，触发插入相关的数据到audit中。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees_test(</span><br><span class="line">ID INT PRIMARY KEY NOT NULL,</span><br><span class="line">NAME TEXT NOT NULL,</span><br><span class="line">AGE INT NOT NULL,</span><br><span class="line">ADDRESS CHAR(50),</span><br><span class="line">SALARY REAL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE audit(</span><br><span class="line">EMP_no INT NOT NULL,</span><br><span class="line">NAME TEXT NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建触发器  //employees_test添加数据时往audit表添加数据</span><br><span class="line">CREATE TRIGGER audit_log </span><br><span class="line">AFTER INSERT ON employees_test</span><br><span class="line">FOR EACH Row </span><br><span class="line">INSERT into audit</span><br><span class="line">VALUES (new.id,new.NAME)</span><br></pre></td></tr></table></figure><h2 id="修改表数据"><a href="#修改表数据" class="headerlink" title="修改表数据"></a>修改表数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//修改表</span><br><span class="line">UPDATE titles_test</span><br><span class="line">SET to_date=NULL,from_date=&#x27;2001-01-01&#x27;</span><br><span class="line">WHERE to_date = &#x27;9999-01-01&#x27;</span><br><span class="line"></span><br><span class="line">//替换表数据 </span><br><span class="line">UPDATE titles_test</span><br><span class="line">SET emp_no = REPLACE(emp_no, &#x27;10001&#x27;, &#x27;10005&#x27;) </span><br><span class="line">where </span><br><span class="line">id=5;</span><br><span class="line"></span><br><span class="line">//修改表名</span><br><span class="line">ALTER  TABLE titles_test</span><br><span class="line">RENAME TO titles_2017</span><br></pre></td></tr></table></figure><h2 id="创建外键"><a href="#创建外键" class="headerlink" title="创建外键"></a>创建外键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.在创建表时设置外键约束</span><br><span class="line">[CONSTRAINT &lt;外键名&gt;] FOREIGN KEY 字段名 [，字段名2，…]</span><br><span class="line"></span><br><span class="line">REFERENCES &lt;主表名&gt; 主键列1 [，主键列2，…]</span><br><span class="line">2.在修改表时添加外键约束</span><br><span class="line">ALTER TABLE &lt;数据表名&gt; ADD CONSTRAINT &lt;索引名&gt;</span><br><span class="line"></span><br><span class="line">FOREIGN KEY(&lt;列名&gt;) REFERENCES &lt;主表名&gt; (&lt;列名&gt;);</span><br><span class="line">3.删除外键约束</span><br><span class="line">ALTER TABLE &lt;表名&gt; DROP FOREIGN KEY &lt;外键约束名&gt;;</span><br><span class="line"></span><br><span class="line">where中in跟=区别</span><br><span class="line">查两个学生</span><br><span class="line">select * from student where 学生姓名=&#x27;张三&#x27; or 学生姓名=&#x27;李四&#x27;</span><br><span class="line">select * from student where 学生姓 in（&#x27;张三&#x27; ,&#x27;李四&#x27;)</span><br><span class="line"></span><br><span class="line">在where条件中 in后可以表示一个结果集，而=如果返回结果集的话会报错</span><br><span class="line">Subquery returns more than 1 row 要么写成or的形式</span><br><span class="line"></span><br><span class="line">UPDATE salaries as a</span><br><span class="line">SET a.salary = a.salary*1.1</span><br><span class="line">where </span><br><span class="line">a.to_date=&#x27;9999-01-01&#x27;and</span><br><span class="line">(a.emp_no =&quot;10001&quot; or a.emp_no =&quot;10002&quot;)</span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户登录功能的实现</title>
      <link href="/xg-123456.gtihub.io/2021/09/14/yong-hu-deng-lu-gong-neng-de-shi-xian/"/>
      <url>/xg-123456.gtihub.io/2021/09/14/yong-hu-deng-lu-gong-neng-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用户登录功能的实现-基于上篇SSM整合图书管理系统"><a href="#用户登录功能的实现-基于上篇SSM整合图书管理系统" class="headerlink" title="用户登录功能的实现(基于上篇SSM整合图书管理系统)"></a>用户登录功能的实现(基于上篇SSM整合图书管理系统)</h1><h2 id="SQL文件"><a href="#SQL文件" class="headerlink" title="SQL文件"></a>SQL文件</h2><ul><li>还是在ssmbuild数据库中建立user表（数据自己添加）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table user</span><br><span class="line">(</span><br><span class="line">    id       int not null,</span><br><span class="line">    password int not null,</span><br><span class="line">    constraint user_id_uindex</span><br><span class="line">        unique (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alter table user</span><br><span class="line">    add primary key (id);</span><br></pre></td></tr></table></figure><h2 id="User实体类"><a href="#User实体类" class="headerlink" title="User实体类"></a>User实体类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.ssm.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private int id;</span><br><span class="line">    private int password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/User&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;UserServiceImpl&quot;)</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/USERlogin&quot;)</span><br><span class="line">    public String login(User user, HttpServletRequest request) &#123;</span><br><span class="line">        User resultUser= userService.USERlogin(user);</span><br><span class="line">        System.out.println(resultUser);</span><br><span class="line">        if(resultUser==null) &#123;</span><br><span class="line">            request.setAttribute(&quot;books&quot;, user);</span><br><span class="line">            request.setAttribute(&quot;errorMsg&quot;, &quot;用户名或密码错误！&quot;);</span><br><span class="line">            return &quot;error&quot;;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            HttpSession session=request.getSession();</span><br><span class="line">            session.setAttribute(&quot;currentUser&quot;, resultUser);</span><br><span class="line">            return &quot;redirect:/book/allBook&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserMapper"><a href="#UserMapper" class="headerlink" title="UserMapper"></a>UserMapper</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    User USERlogin(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.ssm.dao.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--登录对比--&gt;</span><br><span class="line">    &lt;select id=&quot;USERlogin&quot;  resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from ssmbuild.user where id=#&#123;id&#125; and password=#&#123;password&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line">    User USERlogin(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    public void setUserMapper(UserMapper userMapper) &#123;</span><br><span class="line">        this.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User USERlogin(User user) &#123;</span><br><span class="line">        return userMapper.USERlogin(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="index-jsp页面添加登录表单"><a href="#index-jsp页面添加登录表单" class="headerlink" title="index.jsp页面添加登录表单"></a>index.jsp页面添加登录表单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;用户登录&lt;/h3&gt;</span><br><span class="line">  &lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/User/USERlogin&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    userName:&lt;input type=&quot;text&quot; name=&quot;id&quot; value=&quot;$&#123;id&#125;&quot;/&gt;&lt;br/&gt;</span><br><span class="line">    passWord:&lt;input type=&quot;text&quot; name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;&lt;br/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h2><ul><li>添加mappers<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">        &lt;mapper class=&quot;com.ssm.dao.BookMapper&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC-xml"><a href="#SpringMVC-xml" class="headerlink" title="SpringMVC.xml"></a>SpringMVC.xml</h2></li><li>添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;UserServiceImpl&quot; class=&quot;com.ssm.service.UserServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;userMapper&quot; ref=&quot;userMapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><img src="https://www.ecy.cc/d/file/20210524/bd75f5fb1cc0697edcc5a7ec8a0a9a7c.jpg"></li></ul><h4 id="希望此文章对你有帮助！！！"><a href="#希望此文章对你有帮助！！！" class="headerlink" title="### 希望此文章对你有帮助！！！"></a>### 希望此文章对你有帮助！！！</h4>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM小型项目整合</title>
      <link href="/xg-123456.gtihub.io/2021/09/13/ssm-xiao-xing-xiang-mu-zheng-he/"/>
      <url>/xg-123456.gtihub.io/2021/09/13/ssm-xiao-xing-xiang-mu-zheng-he/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\xg-123456.gtihub.io\assets\css\APlayer.min.css"><script src="\xg-123456.gtihub.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SSM小型项目整合"><a href="#SSM小型项目整合" class="headerlink" title="SSM小型项目整合"></a>SSM小型项目整合</h1><h2 id="图书管理（实现基本的增删改查）"><a href="#图书管理（实现基本的增删改查）" class="headerlink" title="图书管理（实现基本的增删改查）"></a>图书管理（实现基本的增删改查）</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>IDEA</li><li>MySQL 8.0.22</li><li>Tomcat 7</li><li>Maven 3.0<h3 id="技术要求"><a href="#技术要求" class="headerlink" title="技术要求"></a>技术要求</h3></li><li>需要基本掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识。</li></ul><h3 id="数据库代码"><a href="#数据库代码" class="headerlink" title="数据库代码"></a>数据库代码</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `ssmbuild`;</span><br><span class="line"></span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `books`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `books` (</span><br><span class="line">`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;书id&#x27;,</span><br><span class="line">`bookName` VARCHAR(100) NOT NULL COMMENT &#x27;书名&#x27;,</span><br><span class="line">`bookCounts` INT(11) NOT NULL COMMENT &#x27;数量&#x27;,</span><br><span class="line">`detail` VARCHAR(200) NOT NULL COMMENT &#x27;描述&#x27;,</span><br><span class="line">KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">INSERT  INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES</span><br><span class="line">(1,&#x27;Java&#x27;,1,&#x27;从入门到放弃&#x27;),</span><br><span class="line">(2,&#x27;MySQL&#x27;,10,&#x27;从删库到跑路&#x27;),</span><br><span class="line">(3,&#x27;Linux&#x27;,5,&#x27;从进门到进牢&#x27;);</span><br></pre></td></tr></table></figure><h3 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h3><ul><li>1.新建maven项目ssmbuild</li><li>2.导入相关依赖到POM.xml文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;ssmbuild&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;12&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;12&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--Junit--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--数据库驱动--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.22&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Servlet - JSP --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Mybatis--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Spring--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--    Lombok  添加注解 自动添加有参无参还有setget方法--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.18.14&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li>3.Maven资源过滤设置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li>4.建立基本架构  </li><li>com.ssm.pojo</li><li>com.ssm.controller</li><li>com.ssm.dao</li><li>com.ssm.service<br><img src="https://i.loli.net/2021/09/13/HbguOn5yPGqLUxv.png" alt="ssm基本架构.png"><h3 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h3></li></ul><p>1.数据库配置文件 database.properties  </p><ul><li>MySQL小于8.0版本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/自己数据库名称?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=自己的密码</span><br></pre></td></tr></table></figure></li><li>MySQL大于于8.0版本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/自己数据库名称?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true </span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=自己的密码</span><br></pre></td></tr></table></figure></li></ul><p>2.IDEA关联数据库<br>3.编写MyBatis的核心配置文件</p><ul><li>mybatis-config.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--    配置数据源 整合之后给spring做--&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;package name=&quot;com.ssm.pojo&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class=&quot;com.ssm.dao.BookMapper&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>4、编写数据库对应的实体类 com.ssm.pojo.Books<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//使用lombok插件！</span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">//Lombok  添加注解 自动添加有参无参还有setget方法</span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Books &#123;</span><br><span class="line">    private int bookID;</span><br><span class="line">    private String bookName;</span><br><span class="line">    private int bookCounts;</span><br><span class="line">    private String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>5、编写Dao层的 Mapper接口！<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public interface BookMapper &#123;</span><br><span class="line">    //增删改查</span><br><span class="line">    //增加一个Book</span><br><span class="line">    int addBook(Books book);</span><br><span class="line"></span><br><span class="line">    //根据id删除一个Book</span><br><span class="line">    int deleteBookById(@Param(&quot;bookID&quot;) int id);</span><br><span class="line"></span><br><span class="line">    //更新Book</span><br><span class="line">    int updateBook(Books books);</span><br><span class="line"></span><br><span class="line">    //根据id查询,返回一个Book</span><br><span class="line">    Books queryBookById(@Param(&quot;bookID&quot;) int id);</span><br><span class="line"></span><br><span class="line">    //查询全部Book,返回list集合</span><br><span class="line">    List&lt;Books&gt; queryAllBook();</span><br><span class="line"></span><br><span class="line">    Books queryBookByName(@Param(&quot;bookName&quot;) String bookName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;com.ssm.dao.BookMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--增加一个Book--&gt;</span><br><span class="line">    &lt;insert id=&quot;addBook&quot; parameterType=&quot;Books&quot;&gt;</span><br><span class="line">        insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">        values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据id删除一个Book--&gt;</span><br><span class="line">    &lt;delete id=&quot;deleteBookById&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--更新Book--&gt;</span><br><span class="line">    &lt;update id=&quot;updateBook&quot; parameterType=&quot;Books&quot;&gt;</span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据id查询,返回一个Book--&gt;</span><br><span class="line">    &lt;select id=&quot;queryBookById&quot; resultType=&quot;Books&quot;&gt;</span><br><span class="line">        select * from ssmbuild.books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询全部Book--&gt;</span><br><span class="line">    &lt;select id=&quot;queryAllBook&quot; resultType=&quot;Books&quot;&gt;</span><br><span class="line">        select * from ssmbuild.books;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;!--    查询书籍--&gt;</span><br><span class="line">    &lt;select id=&quot;queryBookByName&quot; parameterType=&quot;String&quot; resultType=&quot;Books&quot;&gt;</span><br><span class="line">        select * from ssmbuild.books where bookName = #&#123;bookName&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>7、编写Service层的接口和实现类  </li><li>BookService<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public interface BookService &#123;</span><br><span class="line">    //增加一个Book</span><br><span class="line">    int addBook(Books books);</span><br><span class="line">    //根据id删除一个Book</span><br><span class="line">    int deleteBookById(int id);</span><br><span class="line">    //更新Book</span><br><span class="line">    int updateBook(Books books);</span><br><span class="line">    //根据id查询,返回一个Book</span><br><span class="line">    Books queryBookById(int id);</span><br><span class="line">    //查询全部Book,返回list集合</span><br><span class="line">    List&lt;Books&gt; queryAllBook();</span><br><span class="line"></span><br><span class="line">    Books queryBookByName(String bookName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>BookServiceImpl<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class BookServiceImpl implements BookService&#123;</span><br><span class="line">    //调用dao层的操作，设置一个set接口，方便Spring管理</span><br><span class="line">    private BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    public void setBookMapper(BookMapper bookMapper) &#123;</span><br><span class="line">        this.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int addBook(Books books) &#123;</span><br><span class="line">        return bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int deleteBookById(int id) &#123;</span><br><span class="line">        return bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int updateBook(Books books) &#123;</span><br><span class="line">        return bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Books queryBookById(int id) &#123;</span><br><span class="line">        return bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Books&gt; queryAllBook() &#123;</span><br><span class="line">        return bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">    public Books queryBookByName(String bookName) &#123;</span><br><span class="line">        return bookMapper.queryBookByName(bookName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring层编写"><a href="#Spring层编写" class="headerlink" title="Spring层编写"></a>Spring层编写</h3><p>1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；<br>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml跟spring-service.xml</p><ul><li>spring-dao.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置整合mybatis --&gt;</span><br><span class="line">    &lt;!-- 1.关联数据库文件 --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:database.properties&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2.数据库连接池 --&gt;</span><br><span class="line">    &lt;!--数据库连接池</span><br><span class="line">        dbcp 半自动化操作 不能自动连接</span><br><span class="line">        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;!-- 配置连接池属性 --&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- c3p0连接池的私有属性 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;!-- 关闭连接后不自动commit --&gt;</span><br><span class="line">        &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;!-- 获取连接超时时间 --&gt;</span><br><span class="line">        &lt;property name=&quot;checkoutTimeout&quot; value=&quot;10000&quot;/&gt;</span><br><span class="line">        &lt;!-- 当获取连接失败重试次数 --&gt;</span><br><span class="line">        &lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br><span class="line">    &lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</span><br><span class="line">        &lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.ssm.dao&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li>spring-service.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">   http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">   http://www.springframework.org/schema/context</span><br><span class="line">   http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描service相关的bean --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.ssm.service&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--BookServiceImpl注入到IOC容器中--&gt;</span><br><span class="line">    &lt;bean id=&quot;BookServiceImpl&quot; class=&quot;com.ssm.service.BookServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;bookMapper&quot; ref=&quot;bookMapper&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="SpringMVC层编写"><a href="#SpringMVC层编写" class="headerlink" title="SpringMVC层编写"></a>SpringMVC层编写</h3><p>1、web.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">    &lt;!--DispatcherServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    &lt;!--    乱码过滤--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line">    &lt;!--    session--&gt;</span><br><span class="line">    &lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;15&lt;/session-timeout&gt;</span><br><span class="line">    &lt;/session-config&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>2.spring-mvc.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">   http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">   http://www.springframework.org/schema/context</span><br><span class="line">   http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">   http://www.springframework.org/schema/mvc</span><br><span class="line">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置SpringMVC --&gt;</span><br><span class="line">    &lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line">    &lt;!-- 2.静态资源默认servlet配置--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.扫描web相关的bean --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.ssm.controller&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>3、Spring配置整合文件，applicationContext.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    &lt;import resource=&quot;classpath:spring-dao.xml&quot;/&gt;</span><br><span class="line">    &lt;import resource=&quot;classpath:spring.-service.xml&quot;/&gt;</span><br><span class="line">    &lt;import resource=&quot;classpath:spring-mvc.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="Controller-和-视图层编写"><a href="#Controller-和-视图层编写" class="headerlink" title="Controller 和 视图层编写"></a>Controller 和 视图层编写</h3><p>1、BookController 类编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/book&quot;)</span><br><span class="line">public class BookController &#123;</span><br><span class="line">    //controller 调用service</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;BookServiceImpl&quot;)</span><br><span class="line">    private BookService bookService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/allBook&quot;)</span><br><span class="line">    public String list(Model model) &#123;</span><br><span class="line">        List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">        model.addAttribute(&quot;list&quot;, list);</span><br><span class="line">        return &quot;allBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //新增书籍</span><br><span class="line">    @RequestMapping(&quot;/toaddBook&quot;)</span><br><span class="line">    public String addPaper(Books books) &#123;</span><br><span class="line">        return &quot;addBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //添加书籍页面的按钮事件</span><br><span class="line">    @RequestMapping(&quot;addBook&quot;)</span><br><span class="line">    public String addBook(Books books)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;addBook=&gt;&quot;+books);</span><br><span class="line">        bookService.addBook(books);</span><br><span class="line">        return &quot;redirect:/book/allBook&quot;;//重定向到allBook</span><br><span class="line">    &#125;</span><br><span class="line">    //跳转到修改页面</span><br><span class="line">    @RequestMapping(&quot;/toUpdateBook&quot;)</span><br><span class="line">    public String toUpdatePage(int id,Model model)&#123;</span><br><span class="line">        Books book = bookService.queryBookById(id);</span><br><span class="line">        model.addAttribute(&quot;book&quot;,book);</span><br><span class="line">        return &quot;updateBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //修改书籍</span><br><span class="line">    @RequestMapping(&quot;/updateBook&quot;)</span><br><span class="line">    public String updateBook(Books book)&#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        bookService.updateBook(book);</span><br><span class="line">        return &quot;redirect:/book/allBook&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //删除书籍</span><br><span class="line">    @RequestMapping(&quot;/deleteBook/&#123;bookID&#125;&quot;)</span><br><span class="line">    public String deleteBook(@PathVariable(&quot;bookID&quot;) int id)&#123;</span><br><span class="line"></span><br><span class="line">        bookService.deleteBookById(id);</span><br><span class="line">        return &quot;redirect:/book/allBook&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //查询书籍</span><br><span class="line">    @RequestMapping(&quot;/queryBook&quot;)</span><br><span class="line">    public String queryBook(String queryBookName,Model model)&#123;</span><br><span class="line">        Books book = bookService.queryBookByName(queryBookName);</span><br><span class="line">        List&lt;Books&gt; lists = new ArrayList&lt;Books&gt;();</span><br><span class="line">        lists.add(book);</span><br><span class="line">        if (book == null)&#123;</span><br><span class="line">            lists =  bookService.queryAllBook();</span><br><span class="line">            model.addAttribute(&quot;error&quot;,&quot;error&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(&quot;list&quot;,lists);</span><br><span class="line">        return &quot;allBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="到此为止项目结束。"><a href="#到此为止项目结束。" class="headerlink" title="到此为止项目结束。"></a>到此为止项目结束。</h3><p>1.还有不懂的地方可以查看<br><a href="https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng">狂神说文档</a>。<br>附带b站视频：<a href="https://www.bilibili.com/video/BV1RE41127rv?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1RE41127rv?spm_id_from=333.999.0.0</a><br>项目仓库地址：<a href="https://github.com/xg-123456/xg--ssm-">https://github.com/xg-123456/xg--ssm-</a></p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/xg-123456.gtihub.io/2021/09/13/wo-de-di-yi-pian-bo-ke-wen-zhang/"/>
      <url>/xg-123456.gtihub.io/2021/09/13/wo-de-di-yi-pian-bo-ke-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>#网站搭建<br>##需要的编辑软件</p><ul><li>TYpora<br>个人建议<br>##图片<br><img src="https://tse1-mm.cn.bing.net/th/id/R-C.33d0949ed1d018fbd23b9264027e58e0?rik=XYcoHb/oHS2aFw&riu=http://www.desktx.com/d/file/wallpaper/scenery/20170120/df204ebd7a4829933463e2989deb54c6.jpg&ehk=oIKu9Q7Dsgg8tGWfXQ/dcQBt4l/92jwsatz95dhd0oE=&risl=&pid=ImgRaw&r=0"></li></ul><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 第一篇博客文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/xg-123456.gtihub.io/2021/09/12/hello-world/"/>
      <url>/xg-123456.gtihub.io/2021/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
